


    //The following codes are generated by backend engine!



    document.addEventListener("DOMContentLoaded", () => {
    
     
            
            const name = document.getElementById('iv15t');
            const image = document.getElementById('add_image');
            const story = document.getElementById('isv0k');
            const addButton = document.getElementById('i0t6j');
        
            function verifyInput(){
            console.log('verifyInput called');
            //   if (!verifyLinkedInPageUrlInput(linkedInPageUrlInput.value))
            //   {
            //     alert("Please enter a valid LinkedIn page URL");
            //     return false;
            //   }
            if (name.value.trim() === ""){
                alert("Please enter your name");
                return false;
            }
            if (story.value.trim() === ""){
                alert("Please enter your story");
                return false;
            }
            return true;
        }
            function setTextAreaSelection() {
            story.addEventListener("click", () => {
                story.focus();
                story.setSelectionRange(0, 0);
            });
        }
            setTextAreaSelection()
            addButton.addEventListener("click", () =>{
                if (verifyInput()) {
                    // Create FormData object to handle both text and file upload
                    const formData = new FormData();
                    formData.append("name", name.value);
                    formData.append("image", image.files[0]);  // Add the image file
                    formData.append("storytext", story.value);
                    fetch("http://localhost:3030/api/v1/posts/add", {
                        method: "POST",
                        body: formData  
                    }).then(res => {
                        console.log("Request complete! response:", res);
                        location.reload();
                    }).catch(error => {
                        console.error("Error:", error);
                    });
                }
            });
         
      (async () => {
        try {
          const feedSpace = document.getElementById('iafow');
          const response = await fetch("http://localhost:3030/api/v1/posts/get");

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          // Log raw response
          const rawResponse = await response.text();
          console.log('Raw Response:', rawResponse);

          // Parse JSON response
          let posts;
          try {
            posts = JSON.parse(rawResponse);
          } catch (e) {
            console.error('Error parsing JSON:', e);
            throw new Error('Failed to parse JSON response');
          }

          console.log('Parsed Posts:', posts);

          // Check if posts is an array
          if (!Array.isArray(posts)) {
            throw new Error('Expected posts to be an array');
          }

          // Clear the feed space before appending posts
          feedSpace.innerHTML = '';

          // Function to format ISO timestamp
          function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', hour12: true };
            return date.toLocaleDateString('en-US', options);
          }

          posts.forEach(post => {
            // Create the container for the post
            const postDiv = document.createElement('div');
            postDiv.classList.add('post');

            // Create the post header
            const postHeader = document.createElement('div');
            postHeader.classList.add('post-header');

            const userDetails = document.createElement('div');
            userDetails.classList.add('user-details');

            const username = document.createElement('span');
            username.classList.add('username');
            username.textContent = post.name || 'Unknown User'; // Use 'name' field from the response

            const timestamp = document.createElement('span');
            timestamp.classList.add('timestamp');
            timestamp.textContent = formatTimestamp(post.created_at) || 'Unknown Time'; // Format timestamp            

            userDetails.appendChild(username);
            userDetails.appendChild(timestamp);

            postHeader.appendChild(userDetails);

            // Create the post content
            const postContent = document.createElement('div');
            postContent.classList.add('post-content');

            const postText = document.createElement('p');
            postText.textContent = post.story_text || 'No content available'; // Use 'story_text' from the response

            const postImage = document.createElement('img');
            postImage.src = post.imageUrl || 'logo.svg'; // Use imageUrl from the API
            postImage.alt = 'Post Image';
            postImage.classList.add('post-image');

            postContent.appendChild(postText);
            postContent.appendChild(postImage);

            // Create the post actions
            /* const postActions = document.createElement('div');
            postActions.classList.add('post-actions');

            const likeButton = document.createElement('button');
            likeButton.classList.add('action-btn');
            likeButton.textContent = 'Like';

            const commentButton = document.createElement('button');
            commentButton.classList.add('action-btn');
            commentButton.textContent = 'Comment';

            const shareButton = document.createElement('button');
            shareButton.classList.add('action-btn');
            shareButton.textContent = 'Share';

            postActions.appendChild(likeButton);
            postActions.appendChild(commentButton);
            postActions.appendChild(shareButton); */

            // Append header, content, and actions to the post container
            postDiv.appendChild(postHeader);
            postDiv.appendChild(postContent);
            // postDiv.appendChild(postActions);

            // Append the post container to the feed space
            feedSpace.appendChild(postDiv);
          });
        } catch (error) {
          console.error('Error:', error);
        }
      })();
    
});
